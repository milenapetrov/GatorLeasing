// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/milenapetrov/GatorLeasing/gator-leasing-server/dto"
	mock "github.com/stretchr/testify/mock"
)

// ITenantUserRepository is an autogenerated mock type for the ITenantUserRepository type
type ITenantUserRepository struct {
	mock.Mock
}

// CreateTenantUser provides a mock function with given fields: tenantUser
func (_m *ITenantUserRepository) CreateTenantUser(tenantUser *dto.TenantUser) (uint, error) {
	ret := _m.Called(tenantUser)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(*dto.TenantUser) (uint, error)); ok {
		return rf(tenantUser)
	}
	if rf, ok := ret.Get(0).(func(*dto.TenantUser) uint); ok {
		r0 = rf(tenantUser)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*dto.TenantUser) error); ok {
		r1 = rf(tenantUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTenantUserByUserID provides a mock function with given fields: userId, tenantId
func (_m *ITenantUserRepository) GetTenantUserByUserID(userId string, tenantId uint) (*dto.TenantUser, error) {
	ret := _m.Called(userId, tenantId)

	var r0 *dto.TenantUser
	var r1 error
	if rf, ok := ret.Get(0).(func(string, uint) (*dto.TenantUser, error)); ok {
		return rf(userId, tenantId)
	}
	if rf, ok := ret.Get(0).(func(string, uint) *dto.TenantUser); ok {
		r0 = rf(userId, tenantId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TenantUser)
		}
	}

	if rf, ok := ret.Get(1).(func(string, uint) error); ok {
		r1 = rf(userId, tenantId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewITenantUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewITenantUserRepository creates a new instance of ITenantUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewITenantUserRepository(t mockConstructorTestingTNewITenantUserRepository) *ITenantUserRepository {
	mock := &ITenantUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
