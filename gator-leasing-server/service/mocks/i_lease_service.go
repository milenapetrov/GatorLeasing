// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/milenapetrov/GatorLeasing/gator-leasing-server/entity"
	mock "github.com/stretchr/testify/mock"
)

// ILeaseService is an autogenerated mock type for the ILeaseService type
type ILeaseService struct {
	mock.Mock
}

// CreateLease provides a mock function with given fields: leaseToCreate
func (_m *ILeaseService) CreateLease(leaseToCreate *entity.CreateLease) (uint, error, int) {
	ret := _m.Called(leaseToCreate)

	var r0 uint
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(*entity.CreateLease) (uint, error, int)); ok {
		return rf(leaseToCreate)
	}
	if rf, ok := ret.Get(0).(func(*entity.CreateLease) uint); ok {
		r0 = rf(leaseToCreate)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(*entity.CreateLease) error); ok {
		r1 = rf(leaseToCreate)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(*entity.CreateLease) int); ok {
		r2 = rf(leaseToCreate)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// DeleteLease provides a mock function with given fields: id
func (_m *ILeaseService) DeleteLease(id uint) (error, int) {
	ret := _m.Called(id)

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(uint) (error, int)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(uint) int); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// EditLease provides a mock function with given fields: leaseToEdit
func (_m *ILeaseService) EditLease(leaseToEdit *entity.EditLease) (error, int) {
	ret := _m.Called(leaseToEdit)

	var r0 error
	var r1 int
	if rf, ok := ret.Get(0).(func(*entity.EditLease) (error, int)); ok {
		return rf(leaseToEdit)
	}
	if rf, ok := ret.Get(0).(func(*entity.EditLease) error); ok {
		r0 = rf(leaseToEdit)
	} else {
		r0 = ret.Error(0)
	}

	if rf, ok := ret.Get(1).(func(*entity.EditLease) int); ok {
		r1 = rf(leaseToEdit)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetAllLeases provides a mock function with given fields:
func (_m *ILeaseService) GetAllLeases() ([]*entity.Lease, error, int) {
	ret := _m.Called()

	var r0 []*entity.Lease
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func() ([]*entity.Lease, error, int)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entity.Lease); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Lease)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func() int); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// GetPaginatedLeases provides a mock function with given fields: paginatedLeasesRequest
func (_m *ILeaseService) GetPaginatedLeases(paginatedLeasesRequest *entity.PaginatedLeasesRequest) ([]*entity.Lease, string, int64, error, int) {
	ret := _m.Called(paginatedLeasesRequest)

	var r0 []*entity.Lease
	var r1 string
	var r2 int64
	var r3 error
	var r4 int
	if rf, ok := ret.Get(0).(func(*entity.PaginatedLeasesRequest) ([]*entity.Lease, string, int64, error, int)); ok {
		return rf(paginatedLeasesRequest)
	}
	if rf, ok := ret.Get(0).(func(*entity.PaginatedLeasesRequest) []*entity.Lease); ok {
		r0 = rf(paginatedLeasesRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Lease)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.PaginatedLeasesRequest) string); ok {
		r1 = rf(paginatedLeasesRequest)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(*entity.PaginatedLeasesRequest) int64); ok {
		r2 = rf(paginatedLeasesRequest)
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func(*entity.PaginatedLeasesRequest) error); ok {
		r3 = rf(paginatedLeasesRequest)
	} else {
		r3 = ret.Error(3)
	}

	if rf, ok := ret.Get(4).(func(*entity.PaginatedLeasesRequest) int); ok {
		r4 = rf(paginatedLeasesRequest)
	} else {
		r4 = ret.Get(4).(int)
	}

	return r0, r1, r2, r3, r4
}

type mockConstructorTestingTNewILeaseService interface {
	mock.TestingT
	Cleanup(func())
}

// NewILeaseService creates a new instance of ILeaseService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewILeaseService(t mockConstructorTestingTNewILeaseService) *ILeaseService {
	mock := &ILeaseService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
